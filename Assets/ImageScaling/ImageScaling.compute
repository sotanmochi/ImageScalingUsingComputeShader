// Copyright (c) 2019 Soichiro Sugimoto
// Licensed under the MIT License. See LICENSE in the project root for license information.

#pragma kernel ResizeLanczos
#pragma kernel ResizeBilinear

#define PI 3.141592

#define THREAD_X 16
#define THREAD_Y 16

#define LANCZOS_N 3

Texture2D<float4> _SrcImage;
RWTexture2D<float4> _PixelValueWrite;

SamplerState _LinearClamp; // Bilinear filterling
SamplerState _PointClamp;  // Nearest point samping

cbuffer params
{
    int _SrcWidth;
    int _SrcHeight;
    int _DstWidth;
    int _DstHeight;
};

bool IsValidPixelPosition(uint2 p, uint width, uint height)
{
    bool isValid = (p.x >= 0 && p.x < width  && p.y >= 0 && p.y < height);
    return isValid ? true : false;
}

float Sinc(float x)
{
    if(x == 0.0) return 1.0;
    return sin(PI * x) / (PI * x);
}

float Lanczos(float x, float n)
{
    if(abs(x) >= n) return 0.0;
    return Sinc(x) * Sinc(x/n);
}

[numthreads(THREAD_X, THREAD_Y, 1)]
void ResizeLanczos(uint3 id : SV_DispatchThreadID)
{
    if (!IsValidPixelPosition(id.xy, _DstWidth, _DstHeight))
    {
        return;
    }

    float2 range = float2(LANCZOS_N, LANCZOS_N);
    float2 scaleFactor = float2((float)_DstWidth/_SrcWidth, (float)_DstHeight/_SrcHeight);
    if(scaleFactor.x < 1.0)
    {
        range.x *= 1.0/scaleFactor.x;
    }
    if(scaleFactor.y < 1.0)
    {
        range.y *= 1.0/scaleFactor.y;
    }

    float2 srcCenter = float2(_SrcWidth/2.0 - 0.5, _SrcHeight/2.0 - 0.5);
    float2 dstCenter = float2(_DstWidth/2.0 - 0.5, _DstHeight/2.0 - 0.5);

    float x = id.x - dstCenter.x;
    float y = id.y - dstCenter.y;
    float2 uv = float2(x/_DstWidth, y/_DstHeight);

    float2 srcPixelPos = float2(uv.x*_SrcWidth + srcCenter.x, uv.y*_SrcHeight + srcCenter.y);

    int startX = (int)clamp(srcPixelPos.x - range.x, 0, _SrcWidth - 1);
    int startY = (int)clamp(srcPixelPos.y - range.y, 0, _SrcHeight - 1);
    int endX   = (int)clamp(srcPixelPos.x + range.x, 0, _SrcWidth - 1);
    int endY   = (int)clamp(srcPixelPos.y + range.y, 0, _SrcHeight - 1);

    float scaleCorrectionX = LANCZOS_N / range.x;
    float scaleCorrectionY = LANCZOS_N / range.y;
    float totalWeight = 0.0;
    float4 color = float4(0, 0, 0, 0);
    for(int iy = startY; iy <= endY; iy++)
    {
        for(int ix = startX; ix <= endX; ix++)
        {
            float dx = (ix - srcPixelPos.x) * scaleCorrectionX;
            float dy = (iy - srcPixelPos.y) * scaleCorrectionY;

            float weight = Lanczos(dx, LANCZOS_N) * Lanczos(dy, LANCZOS_N);
            totalWeight += weight;
            color += _SrcImage[int2(ix, iy)] * weight;
        }
    }

    if(totalWeight > 0.0)
    {
        color = color / totalWeight;
    }

    _PixelValueWrite[id.xy] = color;
}

[numthreads(THREAD_X, THREAD_Y, 1)]
void ResizeBilinear(uint3 id : SV_DispatchThreadID)
{
    if (!IsValidPixelPosition(id.xy, _DstWidth, _DstHeight))
    {
        return;
    }

    float2 uv = float2((id.x + 0.5)/_DstWidth, (id.y + 0.5)/_DstHeight);
    _PixelValueWrite[id.xy] = _SrcImage.SampleLevel(_LinearClamp, uv, 0); // Bilinear filterling
    // _PixelValueWrite[id.xy] = _SrcImage.SampleLevel(_PointClamp, uv, 0); // Nearest point samping
}
